{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "N",
	"scopeName": "source.n",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#function-callback"
		},
		{
			"include": "#name-type"
		},
		{
			"include": "#record-access"
		},
		{
			"include": "#import-instruction"
		},
		{
			"include": "#record-spread"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"include": "#line-comment"
				},
				{
					"include": "#block-comment"
				}
			]
		},
		"line-comment": {
			"match": "\\/\\/.*",
			"name": "comment.line.double-slash.n"
		},
		"block-comment": {
			"begin": "\\/\\*",
			"end": "\\*\\/",
			"name": "comment.block.n"
		},
		"keywords": {
			"patterns": [
				{
					"include": "#control-keywords"
				},
				{
					"include": "#storage-keywords"
				},
				{
					"include": "#operator-keywords"
				}
			]
		},
		"control-keywords": {
			"name": "keyword.control.n",
			"match": "\\b(in|imp|do|not|match|for|import|return|if|else|class|break|continue|with|yield|while)\\b"
		},
		"storage-keywords": {
			"patterns": [
				{
					"include": "#declare-keywords"		
				},
				{
					"include": "#modifier-keywords"
				}
			]
		},
		"declare-keywords": {
			"name": "keyword.control.n",
			"match": "\\b(let|type|var|alias|class)\\b"
		},
		"modifier-keywords": {
			"name": "storage.modifier.n",
			"match": "\\b(pub)\\b"
		},
		"operator-keywords": {
			"name": "keyword.operator.n",
			"match": "(-)"
		},
		"literals": {
			"patterns": [
				{
					"include": "#number-literals"
				},
				{
					"include": "#char-literals"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#none-literal"
				},
				{
					"include": "#unit-literal"
				}
			]
		},
		"string-literal": {
			"name": "string.quoted.double.n",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"include": "#escape-code-literal"
				},
				{
					"include": "#unicode-literal"
				}
			]
		},
		"number-literals": {
			"patterns": [
				{
					"include": "#hex-literal"
				},
				{
					"include": "#octal-literal"
				},
				{
					"include": "#binary-literal"
				},
				{
					"include": "#float-literal"
				},
				{
					"include": "#decimal-literal"
				}
			]
		},
		"decimal-literal": {
			"match": "\\b([0-9]+)\\b",
			"name": "constant.numeric.n"
		},
		"float-literal": {
			"match": "\\b([0-9]+\\.[0-9]+)\\b",
			"name": "constant.numeric.n"
		},
		"binary-literal": {
			"match": "\\b(0b[01]+)\b",
			"name": "constant.numeric.n"
		},
		"octal-literal": {
			"match": "\\b(0o[0-8]+)\\b",
			"name": "constant.numeric.n"
		},
		"hex-literal": {
			"match": "\\b(0x[0-9a-fA-F]+)\\b",
			"name": "constant.numeric.n"
		},
		"char-literals": {
			"patterns": [
				{
					"include": "#escape-code-literal"
				},
				{
					"include": "#unicode-literal"
				},
				{
					"include": "#char-escape-literal"
				}
			]
		},
		"escape-code-literal": {
			"name": "constant.character.escape.n",
			"match": "\\\\[nrtv0fb\\\"\\\\]"
		},
		"unicode-literal": {
			"name": "constant.character.escape.n",
			"match": "\\\\u\\{[0-9a-fA-F]+\\}"
		},
		"char-escape-literal": {
			"name": "constant.character.escape.n",
			"match": "\\\\\\{.\\}"
		},
		"boolean-literal": {
			"name": "constant.language.n",
			"match": "\\b(true|false)\\b"
		},
		"none-literal": {
			"name": "constant.language.n",
			"match": "\\b(none)\\b"
		},
		"unit-literal": {
			"name": "constant.language.n",
			"match": "\\(\\)"
		},
		"function-callback": {
			"name": "entity.name.function.n",
			"match": "\\b([_a-zA-Z][_0-9a-zA-Z]*)\\s*(?=\\()"
		},
		"record-access": {
			"name": "entity.name.tag",
			"match": "([_a-zA-Z][_0-9a-zA-Z]*)\\s*(?=\\.)"
		},
		"import-instruction": {
			"name": "variable.language.n",
			"match": "(import)\\s+[_a-zA-Z][_0-9a-zA-Z]*",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#keywords"
						}
					]
				}
			}
		},
		"name-type": {
			"patterns": [	
				{
					"include": "#type-declare"
				},
				{
					"include": "#variable-name"
				},
				{
					"include": "#infer-declare"
				}
			]
		},
		"type-declare": {
			"name": "storage.type.n",
			"match": "(?<=:)\\s*([_a-zA-Z][_0-9a-zA-Z]*(\\[[_a-zA-Z][_0-9a-zA-Z]*\\s*(,\\s[_a-zA-Z][_0-9a-zA-Z]*\\s*)*,?\\])?)(\\s*\\-\\>\\s*[_a-zA-Z][_0-9a-zA-Z]*(\\[[_a-zA-Z][_0-9a-zA-Z]*\\s*(,\\s[_a-zA-Z][_0-9a-zA-Z]*\\s*)*,?\\])?)*"
		},
		"variable-name": {
			"name": "variable.name.n",
			"match": "[_a-zA-Z][_0-9a-zA-Z]*\\s*(?=:)"
		},
		"infer-declare": {
			"name": "variable.name.n",
			"match": "[_a-zA-Z][_0-9a-zA-Z]*\\s*(?=\\=)"
		},
		"record-spread": {
			"name": "variable.name.n",
			"match": "(?<=\\.\\.)[_a-zA-Z][_0-9a-zA-Z]*"
		}
	}
}